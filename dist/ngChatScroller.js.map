{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 6926a806a222452720f2","webpack:///./src/ngChatScroller.js","webpack:///./src/ngcsUtils.js"],"names":["ChatScroller","$elem","$log","scrollView","scrollTop","scrollHeight","startScrollTopMax","topDelta","startScrollHeight","scrollType","shouldAnimate","isFastScroll","doCheckSize","sizeChange","repeats","newSizeChange","Math","abs","checkSize","endCurrentScroll","setTimeout","startScrollTime","Date","now","NgChatScrollerController","$scope","$element","$attrs","chatScroller","messages","ngcsNumRendered","ngcsLimit","watches","chatScrollView","val","isEmpty","ngcsTrackBy","scrollViewAttr","$watchCollection","newVal","size","getTrackByVal","last","startScroll","$inject","angular","module","directive","restrict","controller","link","$ctrl","chatMessageSelector","ngcsMessageSelector","$watch","querySelectorAll","length","$evalAsync","stopCurrentScroll","ngcsUtils","arr","undefined","Array","isArray","Object","keys","exports"],"mappings":"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","file":"ngChatScroller.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ngChatScroller\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngChatScroller\"] = factory();\n\telse\n\t\troot[\"ngChatScroller\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6926a806a222452720f2","import ngcsUtils from './ngcsUtils';\n/**\n * First created for Sportwize\n * Smooth chat scroll for both scroll to bottom & maintaining scroll\n */\nclass ChatScroller {\n    constructor($elem, $log) {\n        this.scrollView = $elem;\n        this.$log = $log;\n    }\n\n    startScrollBottom() {\n        // this.$log.info(`@ChatScroller.startScrollBottom`);\n    }\n\n    doScrollBottom() {\n        // this.$log.log(`@ChatScroller.doScrollBottom ${this.scrollView.scrollHeight}, ${Date.now()}`);\n        this.scrollView.scrollTop = this.scrollView.scrollHeight;\n    }\n\n    startMaintainScroll() {\n        this.startScrollTopMax = this.scrollView.scrollTop;\n        // this.$log.info(`@ChatScroller.startMaintainScroll: ${this.startScrollTopMax}, ${Date.now()}`);\n        return this.startScrollTopMax;\n    }\n\n    doMaintainScroll() {\n        const topDelta = this.scrollView.scrollHeight - this.startScrollHeight;\n        // this.$log.info(`@ChatScroller.doMaintainScroll: ${topDelta}, ${Date.now()}`);\n        return this.scrollView.scrollTop = this.startScrollTopMax + topDelta // would be nice to offer animatation\n    }\n\n    startScroll(scrollType, shouldAnimate, isFastScroll = false) {\n\n        const doCheckSize = (sizeChange, repeats) => {\n            // this.$log.info(`@ChatScroller.doCheckSize(${this.startScrollTime}, ${repeats}), ${Date.now()-this.startScrollTime}ms`);\n            const newSizeChange = Math.abs(this.scrollView.scrollHeight - this.startScrollHeight);\n            // this.$log.log(`${this.scrollView.scrollHeight} v ${this.startScrollHeight}`);\n            if (newSizeChange !== sizeChange) {\n                this[`do${scrollType}`]();\n                return checkSize(newSizeChange, 0);\n            } else if (repeats <= 4 || !this.endCurrentScroll) {\n                return checkSize(sizeChange, repeats + 1);\n            } else {\n                // this.$log.log(\"EndCurrentScroll && Resize Detection repeats greater than 4\");\n                return this[`do${scrollType}`]();\n            }\n        };\n\n        const checkSize = (sizeChange, repeats) => {\n            return setTimeout(\n                () => doCheckSize(sizeChange, repeats)\n            );\n        };\n\n        this.scrollType = scrollType;\n        this.endCurrentScroll = isFastScroll;\n        this.shouldAnimate = shouldAnimate;\n        this.startScrollHeight = this.scrollView.scrollHeight;\n        this.startScrollTime = Date.now();\n\n        // this.$log.info(`@ChatScroller.startScroll(${scrollType}, ${shouldAnimate}), ${this.startScrollTime}`);\n        this[`start${scrollType}`]();\n        this[`do${scrollType}`]();\n        // this.$log.info(`@ChatScroller.startCheckSize ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n        return doCheckSize(0, 0);\n    }\n\n    stopCurrentScroll() {\n        // this.$log.info(`@ChatScroller.stopCurrentScroll ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n        // this.scrollView.resize();\n        this[`do${this.scrollType}`]();\n        return this.endCurrentScroll = true;\n    }\n}\n\nclass NgChatScrollerController {\n    constructor($scope, $element, $attrs, $log) {\n        this.$log = $log;\n        this.$attrs = $attrs;\n        this.chatScroller = new ChatScroller($element[0], $log);\n        this.messages = null;\n        $scope.ngcsNumRendered = $scope.ngcsLimit = 0;\n\n        this.watches($scope, $attrs.chatScrollView)\n    }\n\n    getTrackByVal(val) {\n        return ngcsUtils.isEmpty(val) || ngcsUtils.isEmpty(this.$attrs.ngcsTrackBy) ? val : val[this.$attrs.ngcsTrackBy]\n    }\n\n    watches($scope, scrollViewAttr) {\n        $scope.$watchCollection(scrollViewAttr, (newVal) => {\n            // this.$log.info(`@ChatMessages.updateMessages(${ngcsUtils.size(newVal)}), current=${$scope.ngcsLimit}, numRendered=${$scope.ngcsNumRendered})}`)\n\n            if (newVal === null || ngcsUtils.size(newVal) === $scope.ngcsLimit) {\n                return;\n            }\n\n            if (this.getTrackByVal(ngcsUtils.last(this.messages)) === this.getTrackByVal(ngcsUtils.last(newVal))) {\n                // this.$log.info('MaintainScroll');\n                this.chatScroller.startScroll('MaintainScroll', false);\n            } else {\n                // this.$log.info(`ScrollBottom(${$scope.ngcsNumRendered > 0})`);\n                this.chatScroller.startScroll('ScrollBottom', $scope.ngcsNumRendered > 0);\n            }\n\n            this.messages = newVal;\n            $scope.ngcsLimit = ngcsUtils.size(newVal);\n        });\n    }\n}\n\n\nNgChatScrollerController.$inject = ['$scope', '$element', '$attrs', '$log'];\n\nangular.module('ngChatScroller', []).directive('chatScrollView', ['$log', ($log) => { // eslint-disable-line no-unused-vars\n    return {\n        restrict: 'A',\n        controller: NgChatScrollerController,\n        link: ($scope, $element, $attrs, $ctrl) => {\n            const chatMessageSelector = $attrs.ngcsMessageSelector ? $attrs.ngcsMessageSelector : '.chat-message';\n            return $scope.$watch(\n                () => $element[0].querySelectorAll(chatMessageSelector).length,\n                (newVal) => {\n                    // $log.info(`@ChatMessages.watch('numChats'): newVal=${newVal}, oldVal=${oldVal}`);\n                    if (newVal > 0) {\n                        $scope.$evalAsync(() => {\n                            if ($scope.ngcsLimit === newVal) {\n                                $scope.ngcsNumRendered = newVal;\n                                $ctrl.chatScroller.stopCurrentScroll();\n                            }\n                        });\n                    }\n                }\n            );\n        }\n    };\n}]);\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/ngChatScroller.js","/**\n * Created by arolave on 15/11/2016.\n */\nconst ngcsUtils = {\n    size(arr) {\n        if (!arr)\n            return 0;\n\n        return arr.length;\n    },\n    last(arr) {\n        if (!arr)\n            return undefined;\n\n        return arr[arr.length - 1];\n    },\n    isEmpty: function isEmpty(val) {\n        if (val == null) return true;\n\n        if (Array.isArray(val) || typeof val === 'string') {\n            return val.length === 0;\n        }\n\n        if (typeof val === 'object') {\n            return Object.keys(val).length === 0;\n        }\n\n        return false;\n    }\n};\n\nmodule.exports = ngcsUtils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ngcsUtils.js"],"sourceRoot":""}