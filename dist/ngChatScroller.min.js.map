{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ngChatScroller.min.js","webpack:///webpack/bootstrap 2335da6f0e2d60dd36de","webpack:///./src/ngChatScroller.js","webpack:///./src/ngcsUtils.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_ngcsUtils","_ngcsUtils2","ChatScroller","$elem","$log","scrollView","value","scrollTop","scrollHeight","startScrollTopMax","topDelta","startScrollHeight","scrollType","shouldAnimate","_this","isFastScroll","arguments","undefined","doCheckSize","sizeChange","repeats","newSizeChange","Math","abs","checkSize","endCurrentScroll","setTimeout","startScrollTime","Date","now","NgChatScrollerController","$scope","$element","$attrs","chatScroller","messages","ngcsNumRendered","ngcsLimit","watches","chatScrollView","val","isEmpty","ngcsTrackBy","scrollViewAttr","_this2","$watchCollection","newVal","size","getTrackByVal","last","startScroll","$inject","angular","directive","restrict","controller","link","$ctrl","chatMessageSelector","ngcsMessageSelector","$watch","querySelectorAll","$evalAsync","stopCurrentScroll","_typeof","Symbol","iterator","constructor","ngcsUtils","arr","Array","isArray","keys"],"mappings":"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","file":"ngChatScroller.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ngChatScroller\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngChatScroller\"] = factory();\n\telse\n\t\troot[\"ngChatScroller\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ngChatScroller\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngChatScroller\"] = factory();\n\telse\n\t\troot[\"ngChatScroller\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ngcsUtils = __webpack_require__(1);\n\t\n\tvar _ngcsUtils2 = _interopRequireDefault(_ngcsUtils);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * First created for Sportwize\n\t * Smooth chat scroll for both scroll to bottom & maintaining scroll\n\t */\n\tvar ChatScroller = function () {\n\t    function ChatScroller($elem, $log) {\n\t        _classCallCheck(this, ChatScroller);\n\t\n\t        this.scrollView = $elem;\n\t        this.$log = $log;\n\t    }\n\t\n\t    _createClass(ChatScroller, [{\n\t        key: 'startScrollBottom',\n\t        value: function startScrollBottom() {\n\t            // this.$log.info(`@ChatScroller.startScrollBottom`);\n\t        }\n\t    }, {\n\t        key: 'doScrollBottom',\n\t        value: function doScrollBottom() {\n\t            // this.$log.log(`@ChatScroller.doScrollBottom ${this.scrollView.scrollHeight}, ${Date.now()}`);\n\t            this.scrollView.scrollTop = this.scrollView.scrollHeight;\n\t        }\n\t    }, {\n\t        key: 'startMaintainScroll',\n\t        value: function startMaintainScroll() {\n\t            this.startScrollTopMax = this.scrollView.scrollTop;\n\t            // this.$log.info(`@ChatScroller.startMaintainScroll: ${this.startScrollTopMax}, ${Date.now()}`);\n\t            return this.startScrollTopMax;\n\t        }\n\t    }, {\n\t        key: 'doMaintainScroll',\n\t        value: function doMaintainScroll() {\n\t            var topDelta = this.scrollView.scrollHeight - this.startScrollHeight;\n\t            // this.$log.info(`@ChatScroller.doMaintainScroll: ${topDelta}, ${Date.now()}`);\n\t            return this.scrollView.scrollTop = this.startScrollTopMax + topDelta; // would be nice to offer animatation\n\t        }\n\t    }, {\n\t        key: 'startScroll',\n\t        value: function startScroll(scrollType, shouldAnimate) {\n\t            var _this = this;\n\t\n\t            var isFastScroll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t\n\t            var doCheckSize = function doCheckSize(sizeChange, repeats) {\n\t                // this.$log.info(`@ChatScroller.doCheckSize(${this.startScrollTime}, ${repeats}), ${Date.now()-this.startScrollTime}ms`);\n\t                var newSizeChange = Math.abs(_this.scrollView.scrollHeight - _this.startScrollHeight);\n\t                // this.$log.log(`${this.scrollView.scrollHeight} v ${this.startScrollHeight}`);\n\t                if (newSizeChange !== sizeChange) {\n\t                    _this['do' + scrollType]();\n\t                    return checkSize(newSizeChange, 0);\n\t                } else if (repeats <= 4 || !_this.endCurrentScroll) {\n\t                    return checkSize(sizeChange, repeats + 1);\n\t                } else {\n\t                    // this.$log.log(\"EndCurrentScroll && Resize Detection repeats greater than 4\");\n\t                    return _this['do' + scrollType]();\n\t                }\n\t            };\n\t\n\t            var checkSize = function checkSize(sizeChange, repeats) {\n\t                return setTimeout(function () {\n\t                    return doCheckSize(sizeChange, repeats);\n\t                });\n\t            };\n\t\n\t            this.scrollType = scrollType;\n\t            this.endCurrentScroll = isFastScroll;\n\t            this.shouldAnimate = shouldAnimate;\n\t            this.startScrollHeight = this.scrollView.scrollHeight;\n\t            this.startScrollTime = Date.now();\n\t\n\t            // this.$log.info(`@ChatScroller.startScroll(${scrollType}, ${shouldAnimate}), ${this.startScrollTime}`);\n\t            this['start' + scrollType]();\n\t            this['do' + scrollType]();\n\t            // this.$log.info(`@ChatScroller.startCheckSize ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n\t            return doCheckSize(0, 0);\n\t        }\n\t    }, {\n\t        key: 'stopCurrentScroll',\n\t        value: function stopCurrentScroll() {\n\t            // this.$log.info(`@ChatScroller.stopCurrentScroll ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n\t            // this.scrollView.resize();\n\t            this['do' + this.scrollType]();\n\t            return this.endCurrentScroll = true;\n\t        }\n\t    }]);\n\t\n\t    return ChatScroller;\n\t}();\n\t\n\tvar NgChatScrollerController = function () {\n\t    function NgChatScrollerController($scope, $element, $attrs, $log) {\n\t        _classCallCheck(this, NgChatScrollerController);\n\t\n\t        this.$log = $log;\n\t        this.$attrs = $attrs;\n\t        this.chatScroller = new ChatScroller($element[0], $log);\n\t        this.messages = null;\n\t        $scope.ngcsNumRendered = $scope.ngcsLimit = 0;\n\t\n\t        this.watches($scope, $attrs.chatScrollView);\n\t    }\n\t\n\t    _createClass(NgChatScrollerController, [{\n\t        key: 'getTrackByVal',\n\t        value: function getTrackByVal(val) {\n\t            return _ngcsUtils2.default.isEmpty(val) || _ngcsUtils2.default.isEmpty(this.$attrs.ngcsTrackBy) ? val : val[this.$attrs.ngcsTrackBy];\n\t        }\n\t    }, {\n\t        key: 'watches',\n\t        value: function watches($scope, scrollViewAttr) {\n\t            var _this2 = this;\n\t\n\t            $scope.$watchCollection(scrollViewAttr, function (newVal) {\n\t                // this.$log.info(`@ChatMessages.updateMessages(${ngcsUtils.size(newVal)}), current=${$scope.ngcsLimit}, numRendered=${$scope.ngcsNumRendered})}`)\n\t\n\t                if (newVal === null || _ngcsUtils2.default.size(newVal) === $scope.ngcsLimit) {\n\t                    return;\n\t                }\n\t\n\t                if (_this2.getTrackByVal(_ngcsUtils2.default.last(_this2.messages)) === _this2.getTrackByVal(_ngcsUtils2.default.last(newVal))) {\n\t                    // this.$log.info('MaintainScroll');\n\t                    _this2.chatScroller.startScroll('MaintainScroll', false);\n\t                } else {\n\t                    // this.$log.info(`ScrollBottom(${$scope.ngcsNumRendered > 0})`);\n\t                    _this2.chatScroller.startScroll('ScrollBottom', $scope.ngcsNumRendered > 0);\n\t                }\n\t\n\t                _this2.messages = newVal;\n\t                $scope.ngcsLimit = _ngcsUtils2.default.size(newVal);\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return NgChatScrollerController;\n\t}();\n\t\n\tNgChatScrollerController.$inject = ['$scope', '$element', '$attrs', '$log'];\n\t\n\tangular.module('ngChatScroller', []).directive('chatScrollView', ['$log', function ($log) {\n\t    // eslint-disable-line no-unused-vars\n\t    return {\n\t        restrict: 'A',\n\t        controller: NgChatScrollerController,\n\t        link: function link($scope, $element, $attrs, $ctrl) {\n\t            var chatMessageSelector = $attrs.ngcsMessageSelector ? $attrs.ngcsMessageSelector : '.chat-message';\n\t            return $scope.$watch(function () {\n\t                return $element[0].querySelectorAll(chatMessageSelector).length;\n\t            }, function (newVal) {\n\t                // $log.info(`@ChatMessages.watch('numChats'): newVal=${newVal}, oldVal=${oldVal}`);\n\t                if (newVal > 0) {\n\t                    $scope.$evalAsync(function () {\n\t                        if ($scope.ngcsLimit === newVal) {\n\t                            $scope.ngcsNumRendered = newVal;\n\t                            $ctrl.chatScroller.stopCurrentScroll();\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    };\n\t}]);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Created by arolave on 15/11/2016.\n\t */\n\tvar ngcsUtils = {\n\t    size: function size(arr) {\n\t        if (!arr) return 0;\n\t\n\t        return arr.length;\n\t    },\n\t    last: function last(arr) {\n\t        if (!arr) return undefined;\n\t\n\t        return arr[arr.length - 1];\n\t    },\n\t\n\t    isEmpty: function isEmpty(val) {\n\t        if (val == null) return true;\n\t\n\t        if (Array.isArray(val) || typeof val === 'string') {\n\t            return val.length === 0;\n\t        }\n\t\n\t        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n\t            return Object.keys(val).length === 0;\n\t        }\n\t\n\t        return false;\n\t    }\n\t};\n\t\n\tmodule.exports = ngcsUtils;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// ngChatScroller.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2335da6f0e2d60dd36de","import ngcsUtils from './ngcsUtils';\n/**\n * First created for Sportwize\n * Smooth chat scroll for both scroll to bottom & maintaining scroll\n */\nclass ChatScroller {\n    constructor($elem, $log) {\n        this.scrollView = $elem;\n        this.$log = $log;\n    }\n\n    startScrollBottom() {\n        // this.$log.info(`@ChatScroller.startScrollBottom`);\n    }\n\n    doScrollBottom() {\n        // this.$log.log(`@ChatScroller.doScrollBottom ${this.scrollView.scrollHeight}, ${Date.now()}`);\n        this.scrollView.scrollTop = this.scrollView.scrollHeight;\n    }\n\n    startMaintainScroll() {\n        this.startScrollTopMax = this.scrollView.scrollTop;\n        // this.$log.info(`@ChatScroller.startMaintainScroll: ${this.startScrollTopMax}, ${Date.now()}`);\n        return this.startScrollTopMax;\n    }\n\n    doMaintainScroll() {\n        const topDelta = this.scrollView.scrollHeight - this.startScrollHeight;\n        // this.$log.info(`@ChatScroller.doMaintainScroll: ${topDelta}, ${Date.now()}`);\n        return this.scrollView.scrollTop = this.startScrollTopMax + topDelta // would be nice to offer animatation\n    }\n\n    startScroll(scrollType, shouldAnimate, isFastScroll = false) {\n\n        const doCheckSize = (sizeChange, repeats) => {\n            // this.$log.info(`@ChatScroller.doCheckSize(${this.startScrollTime}, ${repeats}), ${Date.now()-this.startScrollTime}ms`);\n            const newSizeChange = Math.abs(this.scrollView.scrollHeight - this.startScrollHeight);\n            // this.$log.log(`${this.scrollView.scrollHeight} v ${this.startScrollHeight}`);\n            if (newSizeChange !== sizeChange) {\n                this[`do${scrollType}`]();\n                return checkSize(newSizeChange, 0);\n            } else if (repeats <= 4 || !this.endCurrentScroll) {\n                return checkSize(sizeChange, repeats + 1);\n            } else {\n                // this.$log.log(\"EndCurrentScroll && Resize Detection repeats greater than 4\");\n                return this[`do${scrollType}`]();\n            }\n        };\n\n        const checkSize = (sizeChange, repeats) => {\n            return setTimeout(\n                () => doCheckSize(sizeChange, repeats)\n            );\n        };\n\n        this.scrollType = scrollType;\n        this.endCurrentScroll = isFastScroll;\n        this.shouldAnimate = shouldAnimate;\n        this.startScrollHeight = this.scrollView.scrollHeight;\n        this.startScrollTime = Date.now();\n\n        // this.$log.info(`@ChatScroller.startScroll(${scrollType}, ${shouldAnimate}), ${this.startScrollTime}`);\n        this[`start${scrollType}`]();\n        this[`do${scrollType}`]();\n        // this.$log.info(`@ChatScroller.startCheckSize ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n        return doCheckSize(0, 0);\n    }\n\n    stopCurrentScroll() {\n        // this.$log.info(`@ChatScroller.stopCurrentScroll ${this.startScrollTime}, ${Date.now()-this.startScrollTime}ms`);\n        // this.scrollView.resize();\n        this[`do${this.scrollType}`]();\n        return this.endCurrentScroll = true;\n    }\n}\n\nclass NgChatScrollerController {\n    constructor($scope, $element, $attrs, $log) {\n        this.$log = $log;\n        this.$attrs = $attrs;\n        this.chatScroller = new ChatScroller($element[0], $log);\n        this.messages = null;\n        $scope.ngcsNumRendered = $scope.ngcsLimit = 0;\n\n        this.watches($scope, $attrs.chatScrollView)\n    }\n\n    getTrackByVal(val) {\n        return ngcsUtils.isEmpty(val) || ngcsUtils.isEmpty(this.$attrs.ngcsTrackBy) ? val : val[this.$attrs.ngcsTrackBy]\n    }\n\n    watches($scope, scrollViewAttr) {\n        $scope.$watchCollection(scrollViewAttr, (newVal) => {\n            // this.$log.info(`@ChatMessages.updateMessages(${ngcsUtils.size(newVal)}), current=${$scope.ngcsLimit}, numRendered=${$scope.ngcsNumRendered})}`)\n\n            if (newVal === null || ngcsUtils.size(newVal) === $scope.ngcsLimit) {\n                return;\n            }\n\n            if (this.getTrackByVal(ngcsUtils.last(this.messages)) === this.getTrackByVal(ngcsUtils.last(newVal))) {\n                // this.$log.info('MaintainScroll');\n                this.chatScroller.startScroll('MaintainScroll', false);\n            } else {\n                // this.$log.info(`ScrollBottom(${$scope.ngcsNumRendered > 0})`);\n                this.chatScroller.startScroll('ScrollBottom', $scope.ngcsNumRendered > 0);\n            }\n\n            this.messages = newVal;\n            $scope.ngcsLimit = ngcsUtils.size(newVal);\n        });\n    }\n}\n\n\nNgChatScrollerController.$inject = ['$scope', '$element', '$attrs', '$log'];\n\nangular.module('ngChatScroller', []).directive('chatScrollView', ['$log', ($log) => { // eslint-disable-line no-unused-vars\n    return {\n        restrict: 'A',\n        controller: NgChatScrollerController,\n        link: ($scope, $element, $attrs, $ctrl) => {\n            const chatMessageSelector = $attrs.ngcsMessageSelector ? $attrs.ngcsMessageSelector : '.chat-message';\n            return $scope.$watch(\n                () => $element[0].querySelectorAll(chatMessageSelector).length,\n                (newVal) => {\n                    // $log.info(`@ChatMessages.watch('numChats'): newVal=${newVal}, oldVal=${oldVal}`);\n                    if (newVal > 0) {\n                        $scope.$evalAsync(() => {\n                            if ($scope.ngcsLimit === newVal) {\n                                $scope.ngcsNumRendered = newVal;\n                                $ctrl.chatScroller.stopCurrentScroll();\n                            }\n                        });\n                    }\n                }\n            );\n        }\n    };\n}]);\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/ngChatScroller.js","/**\n * Created by arolave on 15/11/2016.\n */\nconst ngcsUtils = {\n    size(arr) {\n        if (!arr)\n            return 0;\n\n        return arr.length;\n    },\n    last(arr) {\n        if (!arr)\n            return undefined;\n\n        return arr[arr.length - 1];\n    },\n    isEmpty: function isEmpty(val) {\n        if (val == null) return true;\n\n        if (Array.isArray(val) || typeof val === 'string') {\n            return val.length === 0;\n        }\n\n        if (typeof val === 'object') {\n            return Object.keys(val).length === 0;\n        }\n\n        return false;\n    }\n};\n\nmodule.exports = ngcsUtils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/ngcsUtils.js"],"sourceRoot":""}